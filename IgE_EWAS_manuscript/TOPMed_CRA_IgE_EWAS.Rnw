\documentclass{article}
\usepackage{hyperref}
\hypersetup{
  colorlinks,
  citecolor=black,
  filecolor=black,
  linkcolor=red,
  urlcolor=black
}
%\SweaveOpts{concordance=TRUE}
\usepackage{graphicx, color}
%\usepackage[export]{adjustbox}
\usepackage{floatrow}
\usepackage[T1]{fontenc}
\usepackage[english]{babel}
\usepackage{booktabs}
\usepackage{lscape}
\usepackage{amsmath, amssymb}
\usepackage[sort&compress]{natbib}
\usepackage[a4paper,left=2.5cm,top=2.5cm,bottom=2.5cm,right=2.5cm]{geometry}
\usepackage{fancyhdr}
\usepackage{forloop}
\pagestyle{fancyplain}

\setlength{\parindent}{0cm}
%\renewcommand{\familydefault}{\sfdefault}

%\input{tex/knitr}

\begin{document}
\title{\textbf{CRA IgE EWAS}}

\author{reprk: PKachroo\\
  CDNM, BWH}
\date{\today}
%\begin{document}

\maketitle

\tableofcontents
\clearpage

\section{Setup}

<<setup, echo = TRUE, message = FALSE, results = "markup">>=

# restart R session
#.rs.restartR()
rm(list=ls())

options(mc.cores=5)
system("hostname")
print(Sys.Date())
print(Sys.time())

# Save result files with timeStamp
timeStamp <- as.character(round(unclass(Sys.time())))
print(timeStamp)

# To generate document: 
# Change working directory to code directory
# Run this code on toques using:
# module load R/4.0.3
#R -e 'library(knitr);knit("TOPMed_CRA_IgE_EWAS.Rnw")'
# pdflatex TOPMed_CRA_IgE_EWAS.tex

## load libraries
libs <- c("IlluminaHumanMethylationEPICanno.ilm10b4.hg19",
          "IlluminaHumanMethylationEPICmanifest", "minfi")

for (l in libs) {
  if (require(l, character.only = T)) {
    print(paste0(l, " loaded successfully"))
  } else {
    install.packages(l)
    require(l, character.only = T)
    print(paste0(l, " installed and loaded successfully"))
  }
}

sig_digits <- 2
sum_sd <- function(data, varname) {
    eval(parse(text = str_c("data[, round(summary(", varname, "), digits=2)] %>% print()")))
    eval(parse(text = str_c("print(str_c('SD: ', data[, sd(", varname, ", na.rm = T) %>% 
                                round(sig_digits)]))")))
}

# loading rest of the libraries
libs <- c("limma", "wateRmelon", "minfi", "gplots", "ggplot2", "knitr", "R.utils", "impute", 
          "stats", "tidyverse", "data.table", "here", "e1071", "GGally", "ggrepel", "ENmix",
          "meffil", "data.table", "robustbase", "stringi", "geneplotter", "RColorBrewer",
          "colorRamps", "lumi", "ggrepel", "IlluminaHumanMethylationEPICanno.ilm10b4.hg19",
          "IlluminaHumanMethylationEPICmanifest", "DMRcate", "meffil", "ggpubr","gdata", 
          "gmodels", "tidyr", "dplyr","gridExtra","isva","sva","base", "DMRcate", "SmartSVA",
          "corrplot","RColorBrewer", "bacon")

for (l in libs) {
  if (require(l, character.only = T)) {
    print(paste0(l, " loaded successfully"))
  } else {
    install.packages(l)
    require(l, character.only = T)
    print(paste0(l, " installed and loaded successfully"))
  }
}

source("/udd/reprk/projects/PPG_methylation/450K_DATA/analysis_knitr/scripts/qqman.r")

# Functions for Smart-SVA analysis
# Adapted from Smart-sva tutorial page/github
# # https://rdrr.io/cran/SmartSVA/src/R/SmartSVA.R
edge.lfdr <- function (p, trunc = TRUE, monotone = TRUE,
                       transf = c("probit","logit"), adj = 1.5, eps = 10^-8,
                       lambda = 0.8, ...)
{
  pi0 <- mean(p >= lambda)/(1 - lambda)
  pi0 <- min(pi0, 1)
  n = length(p)
  transf = match.arg(transf)
  if (transf == "probit") {
    p = pmax(p, eps)
    p = pmin(p, 1 - eps)
    x = qnorm(p)
    myd = density(x, adjust = adj)
    mys = smooth.spline(x = myd$x, y = myd$y)
    y = predict(mys, x)$y
    lfdr = pi0 * dnorm(x)/y
  }
  if (transf == "logit") {
    x = log((p + eps)/(1 - p + eps))
    myd = density(x, adjust = adj)
    mys = smooth.spline(x = myd$x, y = myd$y)
    y = predict(mys, x)$y
    dx = exp(x)/(1 + exp(x))^2
    lfdr = pi0 * dx/y
  }
  if (trunc) {
    lfdr[lfdr > 1] = 1
  }

  # Get 'mono' function from 'SVA' package.
  mono <- getFromNamespace("mono", ns="sva")

  if (monotone) {
    lfdr = lfdr[order(p)]
    lfdr = mono(lfdr)
    lfdr = lfdr[rank(p)]
  }
  return(lfdr)
}

f.pval <- function (dat, orth11, orth01, y.norm, rss00, df00)  {

  n <- dim(dat)[2]

  df11 <- dim(orth11)[2]
  df01 <- dim(orth01)[2]

  prj11 <- dat %*% orth11
  prj01 <- dat %*% orth01

  rss11 <- y.norm - rowSums(prj11 * prj11)
  rss01 <- y.norm - rowSums(prj01 * prj01)

  fstats <- ((rss01 - rss11)/(df11 - df01))/(rss11/(n - df11))
  p1 <- 1 - pf(fstats, df1 = (df11 - df01), df2 = (n - df11))

  fstats <- ((rss00 - rss01)/(df01 - df00))/(rss01/(n - df01))
  p2 <- 1 - pf(fstats, df1 = (df01 - df00), df2 = (n - df01))

  return(list(p1=p1, p2=p2))
}

smartsva <-  function(dat, mod, mod0 = NULL, n.sv, B = 100,
		alpha=0.25, epsilon=1e-3, VERBOSE = F) {
	if (is.null(mod0)) {
		mod0 <- mod[, 1]
	}
	
	qr.obj <- qr(mod)
	orth1 <- qr.Q(qr.obj)
	uu <- eigen(crossprod(dat - tcrossprod(dat %*% orth1, orth1)),
			 symmetric=TRUE)$vectors[, 1:n.sv, drop=F]
	
	# Precompute the quantites
	y.norm <- rowSums(dat * dat)
	mod00 <- cbind(mod0)
	orth00 <- qr.Q(qr(mod00))
	prj00 <- dat %*% orth00
	rss00 <- y.norm - rowSums(prj00 * prj00)
	df00 <- dim(orth00)[2]
	
	if (VERBOSE)
		cat(paste("Iteration (out of", B, "):\n"))
	
	i = 0
	rho = 0
	
	while (i < B && rho < 1 - epsilon) {
		i <- i + 1
		mod11 <- cbind(mod, uu)
		mod01 <- cbind(mod0, uu)
		
		orth11 <- qr.Q(qr(mod11))
		orth01<- qr.Q(qr(mod01))
		
		ptmp <- f.pval(dat, orth11, orth01, y.norm, rss00, df00)
		
		if (i == 1) {
			pprob.b <- (1 - edge.lfdr(ptmp[['p1']])^alpha)
		} else {
			pprob.b <- (1 - edge.lfdr(ptmp[['p1']]))
		}
		
		pprob.gam <- (1 - edge.lfdr(ptmp[['p2']]))
		pprob <- pprob.gam * (1 - pprob.b)
		
		uu <- eigen(crossprod(dat * pprob - rowMeans(dat * pprob)),
				symmetric=TRUE)$vectors[, 1:n.sv, drop=F]
		# Update spearman Rho.
		if (i > 1) {
			rho <- cor(x=pprob, y=p.prev, use="pairwise.complete.obs",
					method="spearman")
			p.prev <- pprob
		}else{
			p.prev <- pprob
		}
		if (VERBOSE)
			cat(paste(i, " ", rho, "\n"))
	}
	
	sv <- uu[, 1:n.sv, drop=F]
	retval <- list(sv = sv, n.sv = n.sv, pprob.gam = pprob.gam, 
	               pprob.b = pprob.b, rho = rho, iter = i)
	return(retval)
}

`EstDimRMT` <-
function(data.m,plot=TRUE){
 ### standardise matrix
 M <- apply(data.m,2,function(X){ (X - mean(X))/sqrt(var(X))});
 
 sigma2 <- var(as.vector(M));
 Q <- nrow(data.m)/ncol(data.m);
 ns <- ncol(data.m);
 lambdaMAX <- sigma2*(1+1/Q + 2*sqrt(1/Q));
 lambdaMIN <- sigma2*(1+1/Q - 2*sqrt(1/Q));
 delta <- lambdaMAX - lambdaMIN;#  print(delta);

 roundN <- 3;
 step <- round(delta/ns,roundN);
 while(step==0){
    roundN <- roundN+1;
    step <- round(delta/ns,roundN);
 }
  

 lambda.v <- seq(lambdaMIN,lambdaMAX,by=step);
 dens.v <- vector();
 ii <- 1;
 for(i in lambda.v){
   dens.v[ii] <- (Q/(2*pi*sigma2))*sqrt( (lambdaMAX-i)*(i-lambdaMIN) )/i;
   ii <- ii+1;
 }
 ## theoretical density
 thdens.o <- list(min=lambdaMIN,max=lambdaMAX,step=step,
                  lambda=lambda.v,dens=dens.v);
 C <- 1/nrow(M) * t(M) %*% M;
 eigen.o <- eigen(C,symmetric=TRUE);
 ## empirical density
 estdens.o <- density(eigen.o$values,from=min(eigen.o$values),
                      to=max(eigen.o$values),cut=0);
 intdim <- length(which(eigen.o$values > thdens.o$max));
 evalues.v <- eigen.o$values;
 ## plot
 if(plot){
  minx <- min(min(thdens.o$lambda),min(evalues.v));
  maxx <- max(max(thdens.o$lambda),max(evalues.v));
  miny <- min(min(thdens.o$dens),min(estdens.o$y));
  maxy <- max(max(thdens.o$dens),max(estdens.o$y));
  pdf("RMTplot.pdf",width=4,height=4);
  plot(thdens.o$lambda,thdens.o$dens,xlim=c(0.5,maxx),ylim=c(miny,maxy),
       type="b",col="green",xlab="Folded Eigenvalues",ylab="density",lwd=1.25);
  i <- min(which(estdens.o$x > min(evalues.v)));
  f <- max(which(estdens.o$x < max(evalues.v)));
  points(x=estdens.o$x[i:f],y=estdens.o$y[i:f],type="b",col="red",cex=0.5);
  for(i in 1:intdim){
   abline(v=evalues.v[i],col="red",lwd=2);
  }
  dev.off();
 }
 
 return(list(cor=C,dim=intdim,estdens=estdens.o,thdens=thdens.o,
             evals=eigen.o$values));
}

# smartsva.cpp
smartsva.cpp <-  function(dat, mod, mod0 = NULL, n.sv, B = 100,
                          alpha=0.25, epsilon=1e-3, VERBOSE = F) {
  if (is.null(mod0)) {
    mod0 <- mod[, 1]
  }
  
  qr.obj <- qr(mod)
  orth1 <- qr.Q(qr.obj)
  uu <- eigs_sym(crossprodCpp(dat - tcrossprodCpp(prodCpp(dat, orth1), orth1)),
                 k=n.sv)$vectors[, 1:n.sv, drop=F]
  
  # Precompute the quantites
  y.norm <- rowSums(dat * dat)
  mod00 <- cbind(mod0)
  orth00 <- qr.Q(qr(mod00))
  prj00 <- prodCpp(dat, orth00)
  rss00 <- y.norm - rowSums(prj00 * prj00)
  df00 <- dim(orth00)[2]
  
  if (VERBOSE)
    cat(paste("Iteration (out of", B, "):\n"))
  
  i = 0
  rho = 0
  
  while (i < B && rho < 1 - epsilon) {
    i <- i + 1
    mod11 <- cbind(mod, uu)
    mod01 <- cbind(mod0, uu)
    
    orth11 <- qr.Q(qr(mod11))
    orth01<- qr.Q(qr(mod01))
    
    ptmp <- f.pval.cpp(dat, orth11, orth01, y.norm, rss00, df00)
    
    if (i == 1) {
      pprob.b <- (1 - edge.lfdr(ptmp[['p1']])^alpha)
    } else {
      pprob.b <- (1 - edge.lfdr(ptmp[['p1']]))
    }
    
    pprob.gam <- (1 - edge.lfdr(ptmp[['p2']]))
    pprob <- pprob.gam * (1 - pprob.b)
    
    uu <- eigs_sym(crossprodCpp(dat * pprob - rowMeans(dat * pprob)),
                   k=n.sv)$vectors[, 1:n.sv, drop=F]
    # Update spearman Rho.
    if (i > 1) {
      rho <- cor(x=pprob, y=p.prev, use="pairwise.complete.obs",
                 method="spearman")
      p.prev <- pprob
    }else{
      p.prev <- pprob
    }
    if (VERBOSE)
      cat(paste(i, " ", rho, "\n"))
  }
  
  sv <- uu[, 1:n.sv, drop=FALSE]
  retval <- list(sv = sv, n.sv = n.sv, pprob.gam = pprob.gam, 
                 pprob.b = pprob.b, rho = rho, iter = i)
  return(retval)
}

# for correlations
cor.mtest <- function(mat, ...) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat<- matrix(NA, n, n)
    diag(p.mat) <- 0
    for (i in 1:(n - 1)) {
        for (j in (i + 1):n) {
            tmp <- cor.test(mat[, i], mat[, j], ...)
            p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
        }
    }
  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
  p.mat
}
@

  \subsection{Packages, Data locations and loading}
  
<<echo = TRUE, warning=FALSE, message = FALSE, results = "markup">>=

cra.dir="/proj/regeps/regep00/studies/CRA"
results.dir = file.path(cra.dir, "analysis/reprk/methylation/results/IgE_paper")
plots.dir = file.path(results.dir, "plots")
load(file=file.path(results.dir, 
                "../norm.betas.cra_hg19_clean_NOsexchr_probands_1620830664.RData"))
load(file=file.path(results.dir, "../mset.cra.funnorm_hg19_1620501723.RData"))
pData.cra <- pData(mset.cra.funnorm)
pData.cra$toe_ids <- rownames(pData.cra)
ann850k <- getAnnotation(mset.cra.funnorm)

load(file=file.path(results.dir, "../pca_betas_auto_CRA.RData"))
pcs <- svd$x
pcs=pcs[,1:10]

load(file=file.path(results.dir, 
                "../CRA_EPIC_estimatecellcounts2_result_hg19_1620501723.RData"))

cra.pheno <- read.csv(file=file.path(cra.dir, 
               "data/phenotype/CRA_Phenotype_Data/COS_TRIO_pheno_1165.csv"),
                      as.is=TRUE, sep=",", stringsAsFactors=FALSE)

samplesheet.cra <- read.csv(file=file.path(cra.dir, 
  "data/epigenetic/methylation/TopMed/data/freezes/20200117/LEVEL1/SampleSheet.csv"), 
                            as.is=TRUE, sep = ",", fill=T, stringsAsFactors=FALSE)

rm(mset.cra.funnorm) # clear memory as we don't need this object anymore
@

\section{Data wrangling and prep for SVA}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

samplesheet.cra$Slide <- as.factor(samplesheet.cra$SentrixID)
samplesheet.cra$Sample_Plate <- as.factor(samplesheet.cra$BATCH)
samplesheet.cra$Array <- as.factor(samplesheet.cra$SentrixPosition)
samplesheet.cra$SentrixID <- NULL; samplesheet.cra$BATCH <- NULL; 
samplesheet.cra$SentrixPosition <- NULL

# merge all information necessary for models to phenotype file for CRA
samplesheet.cra=samplesheet.cra[,c("TOEID","Slide","Sample_Plate","Array"), drop=FALSE]
#setnames(pData.cra, "LEVEL1.TOEID", "TOEID")
pData.cra <- merge(pData.cra, samplesheet.cra, by.x="LEVEL1.TOEID", by.y="TOEID", sort=F)
pData.cra <- merge(pData.cra, celltype.est.2, by.x="toe_ids", by.y="row.names", sort=F)
pData.cra <- merge(pData.cra, pcs, by.x="toe_ids", by.y="row.names", sort=F)

cra.pheno.ast <- cra.pheno[cra.pheno$Dr_Dx_Asthma==2,]
pData.pheno.cra <- merge(pData.cra, cra.pheno.ast, by="S_SUBJECTID", sort=F)
dim(pData.pheno.cra) # 788 samples

# Check how probands cluster based on PCs
# final sample set clustering
ggplot(pData.pheno.cra, aes(x = PC1, y = PC2)) + 
  geom_point(aes(color = as.factor(Gender)), alpha = 0.5, size = 2) + 
  labs(title = "PC1 vs PC2 - CRA probands only") + 
  geom_label_repel(aes(label = LEVEL1.TOEID),
                   box.padding   = 0.25, 
                   point.padding = 0.5,
                   segment.color = 'grey50') + 
  theme_minimal() + 
  theme(plot.title = element_text(size = 10, face = "bold"), 
        axis.text = element_text(size = 10), 
        axis.title = element_text(size = 10))

g1 <- ggplot(pData.pheno.cra, aes(x = PC1, y = PC2)) + 
  geom_point(aes(color = as.factor(Gender)), alpha = 0.5, size = 2) + 
  labs(title = "PC1 vs PC2 - CRA probands only") + 
  geom_label_repel(aes(label = LEVEL1.TOEID),
                   box.padding   = 0.25, 
                   point.padding = 0.5,
                   segment.color = 'grey50') + 
  theme_minimal() + 
  theme(plot.title = element_text(size = 10, face = "bold"), 
        axis.text = element_text(size = 10), 
        axis.title = element_text(size = 10))

g2 <- ggplot(pData.pheno.cra, aes(x = PC2, y = PC3)) + 
  geom_point(aes(color = as.factor(Gender)), alpha = 0.5, size = 2) + 
  labs(title = "PC2 vs PC3 - CRA probands only") + 
  geom_label_repel(aes(label = LEVEL1.TOEID),
                   box.padding   = 0.25, 
                   point.padding = 0.5,
                   segment.color = 'grey50') + 
  theme_minimal() + 
  theme(plot.title = element_text(size = 10, face = "bold"), 
        axis.text = element_text(size = 10), 
        axis.title = element_text(size = 10))
grid.arrange(g1,g2, nrow = 1, ncol = 2)
ggsave(path=plots.dir, "pc1_pc2_pc3_probands_gender_CRA.png", width = 9, height = 6)

ggplot(pData.pheno.cra, aes(x = PC1, y = PC2)) + 
  geom_point(aes(color = as.factor(Mothers_Asthma_Hx)), alpha = 0.5, size = 2) + 
  labs(title = "PC1 vs PC2 - CRA probands only") + 
  geom_label_repel(aes(label = LEVEL1.TOEID),
                   box.padding   = 0.25, 
                   point.padding = 0.5,
                   segment.color = 'grey50') + 
  theme_minimal() + 
  theme(plot.title = element_text(size = 10, face = "bold"), 
        axis.text = element_text(size = 10), 
        axis.title = element_text(size = 10))
ggsave(path=plots.dir, "pc1_pc2_probands_masthma_CRA.png", width = 8, height = 6)

# Because sample plate has too many levels so done slightly differently
p1 <- ggplot(pData.pheno.cra, aes(x = PC1, y = PC2)) + scale_color_viridis_d() +
    labs(color = "Sample_Plate", shape = "Sample_Plate", 
         title = "PC1 vs PC2 - CRA probands only") + 
    geom_label_repel(aes(label = LEVEL1.TOEID),
                     box.padding   = 0.25, 
                     point.padding = 0.5,
                     segment.color = 'grey50') + 
    theme_minimal() + 
    theme(plot.title = element_text(size = 10, face = "bold"), 
          axis.text = element_text(size = 10), 
          axis.title = element_text(size = 10))

jit <- position_jitter(seed = 123)
p1 + geom_jitter(aes(shape = Sample_Plate, 
        color = as.factor(Sample_Plate)), size = 2, position = jit) +
    scale_shape_manual(values = rep(15:17, len = 14))
ggsave(path=plots.dir, "pc1_pc2_probands_batch_CRA.png", width = 8, height = 6)

p1 <- ggplot(pData.pheno.cra, aes(x = PC1, y = PC2)) + scale_color_viridis_d() +
    labs(color = "Array", shape = "Array", title = "PC1 vs PC2 - CRA probands only") + 
    geom_label_repel(aes(label = LEVEL1.TOEID),
                     box.padding   = 0.25, 
                     point.padding = 0.5,
                     segment.color = 'grey50') + 
    theme_minimal() + 
    theme(plot.title = element_text(size = 10, face = "bold"), 
          axis.text = element_text(size = 10), 
          axis.title = element_text(size = 10))

jit <- position_jitter(seed = 123)
p1 + geom_jitter(aes(shape = Array, 
        color = as.factor(Array)), size = 2, position = jit) +
    scale_shape_manual(values = rep(15:17, len = 8))
ggsave(path=plots.dir, "pc1_pc2_probands_array_CRA.png", width = 8, height = 6)

pData.pheno.cra$age <- as.numeric(pData.pheno.cra$age)
pData.pheno.cra$Gender <- as.factor(pData.pheno.cra$Gender)
pData.pheno.cra$BMI <- as.numeric(pData.pheno.cra$BMI)
pData.pheno.cra$htcm <- as.numeric(pData.pheno.cra$htcm)
pData.pheno.cra$Mothers_Asthma_Hx <- as.factor(pData.pheno.cra$Mothers_Asthma_Hx)
pData.pheno.cra$Sample_Plate <- as.factor(pData.pheno.cra$Sample_Plate)
#samp.cra.pheno.ast$RC <- as.factor(samp.cra.pheno.ast$RC)
#samp.cra.pheno.ast$beadchip <- as.factor(samp.cra.pheno.ast$beadchip)
pData.pheno.cra$smoking_early_life <- as.factor(pData.pheno.cra$smoking_early_life)
pData.pheno.cra$log10Ige <- as.numeric(pData.pheno.cra$log10Ige)

which(is.na(pData.pheno.cra$log10Ige)) # row 273
pData.pheno.cra[273,]$toe_ids
#[1] "TOE699277-BIS-v01_R03C01"
pData.pheno.cra[is.na(pData.pheno.cra$log10Ige),]$toe_ids
pData.pheno.cra[is.na(pData.pheno.cra$log10Ige),]$S_SUBJECTID

which(is.na(pData.pheno.cra$BMI))
# [1] 506 533 608
pData.pheno.cra[is.na(pData.pheno.cra$BMI),]$toe_ids
# TOE471221-BIS-v01_R05C01, TOE531041-BIS-v01_R01C01, TOE858798-BIS-v01_R02C01

which(is.na(pData.pheno.cra$Mothers_Asthma_Hx))
#[1]  77 155 282
pData.pheno.cra[is.na(pData.pheno.cra$Mothers_Asthma_Hx),]$toe_ids
#TOE263702-BIS-v01_R05C01, TOE539838-BIS-v01_R01C01, TOE809590-BIS-v01_R06C01

which(is.na(pData.pheno.cra$smoking_early_life))
# [1] 197 338 368 591 693
pData.pheno.cra[is.na(pData.pheno.cra$smoking_early_life),]$toe_ids
# TOE280386-BIS-v01_R02C01, TOE227197-BIS-v01_R01C01, TOE974827-BIS-v01_R08C01, 
# TOE528343-BIS-v01_R07C01, TOE710489-BIS-v01_R04C01

pData.pheno.cra <- pData.pheno.cra[!is.na(pData.pheno.cra$log10Ige),]

beta.ewas <- norm.betas.rcp.auto.prob[, colnames(norm.betas.rcp.auto.prob) 
                                      %in% pData.pheno.cra$toe_ids]

ewas_var <- pData.pheno.cra$log10Ige

pData.pheno.cra$sex[pData.pheno.cra$Gender=="F"]<-0;
pData.pheno.cra$sex[pData.pheno.cra$Gender=="M"]<-1;
pData.pheno.cra$sex <- as.factor(pData.pheno.cra$sex)
pData.pheno.cra$Plate <- sapply(as.character(pData.pheno.cra$Sample_Plate), 
  switch, "B0001"=1, "B0002"=2, "B0003"=3, "B0004"=4, "B0005"=5, "B0006"=6, "B0007"=7, 
 "B0008"=8, "B0009"=9, "B0010"=10, "B0011"=11, "B0012"=12, "B0013"=13, "B0014"=14, 
       USE.NAMES = F)
pData.pheno.cra$Plate <- as.factor(pData.pheno.cra$Plate)
#pData.pheno.cra$Slide <- as.numeric(pData.pheno.cra$Slide)
pData.pheno.cra$Array <- as.factor(pData.pheno.cra$Array)

covs=pData.pheno.cra[,c("Plate","Array"), drop=FALSE]
summary(covs)

# this step not needed anymore as betas only contain autosomes for this IgE EWAS
#autosomal.sites <- meffil.get.autosomal.sites("epic")
#autosomal.sites <- intersect(autosomal.sites, rownames(beta.ewas))
#beta.sva <- beta.ewas[autosomal.sites,]

# should not contain NAs but just as a sanity check
dim(beta.ewas)
beta.sva <- na.omit(beta.ewas) 
dim(beta.sva)
#[1] 790798    787

# using betas to calculate SVs to keep on same scale
#M.ewas <- logit2(beta.sva)
#M.ewas <- as.matrix(beta.sva)

cov.frame <- model.frame(~., data.frame(covs, stringsAsFactors=F), na.action=na.pass)

# null model only with technical batch variables
mod0 <- model.matrix(~., cov.frame)
pheno.sel=pData.pheno.cra[,c("log10Ige","Plate","Array"), drop=FALSE]
rownames(pheno.sel) <- pData.pheno.cra$toe_ids

# checking all variables are as factor
which(sapply(pheno.sel, function(x) (is.character(x) | is.factor(x)) & length(unique(x))<2))
@

\section{SVA estimation}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=
# for reproducibility
set.seed(123456)
mod.res <- t(resid(lm(t(beta.sva) ~., data=as.data.frame(pheno.sel))))
n.sv <- EstDimRMT(mod.res, FALSE)$dim + 1
n.sv # 62

# Full model
mod <- model.matrix( ~ log10Ige + Plate + Array, data=pheno.sel)

smartsva.ret <- smartsva(beta.sva, mod=mod, mod0=mod0, n.sv=n.sv)                
smartsva.sv <- as.data.frame(smartsva.ret$sv)
rownames(smartsva.sv) <- pData.pheno.cra$toe_ids

save(smartsva.ret, smartsva.sv, 
     file=file.path(results.dir,paste0("CRA_smartsva_results_IgE_", 
                                       timeStamp,".RData")))

colnames(smartsva.sv) <- gsub(x = colnames(smartsva.sv), pattern = "\\V", 
                              replacement = "SV")
smartsva.sv <- smartsva.sv[,1:10]
smartsva.sv[1:2,]
pData.pheno.cra <- merge(pData.pheno.cra, smartsva.sv, by.x="toe_ids", 
                         by.y="row.names", sort=F)

save(beta.ewas, pData.pheno.cra, 
     file=file.path(results.dir,paste0("CRA_betas_pheno_forIgE.EWAS_",
                                       timeStamp,".RData")))
beta.sva <- NULL
@

\section{Correlations PCs and SVs and pc regression plots}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=
cor.test(pData.pheno.cra$PC1, pData.pheno.cra$log10Ige) # trend
cor.test(pData.pheno.cra$PC2, pData.pheno.cra$log10Ige) # not sig
cor.test(pData.pheno.cra$PC3, pData.pheno.cra$log10Ige) # not sig

cor.test(pData.pheno.cra$PC1, as.numeric(pData.pheno.cra$Slide))
cor.test(pData.pheno.cra$PC2, as.numeric(pData.pheno.cra$Slide))

cor.test(pData.pheno.cra$PC1, as.numeric(pData.pheno.cra$Array))
cor.test(pData.pheno.cra$PC2, as.numeric(pData.pheno.cra$Array))

cor.test(pData.pheno.cra$PC1, as.numeric(pData.pheno.cra$Plate))
cor.test(pData.pheno.cra$PC2, as.numeric(pData.pheno.cra$Plate))

# can go upto 2 in CRA
cor.test(pData.pheno.cra$SV1, pData.pheno.cra$log10Ige) # not sig
cor.test(pData.pheno.cra$SV2, pData.pheno.cra$log10Ige) # not sig
cor.test(pData.pheno.cra$SV3, pData.pheno.cra$log10Ige) # significant

cor.test(pData.pheno.cra$SV1, as.numeric(pData.pheno.cra$Slide))
cor.test(pData.pheno.cra$SV2, as.numeric(pData.pheno.cra$Slide))
cor.test(pData.pheno.cra$SV3, as.numeric(pData.pheno.cra$Slide))

cor.test(pData.pheno.cra$SV1, as.numeric(pData.pheno.cra$Array))
cor.test(pData.pheno.cra$SV2, as.numeric(pData.pheno.cra$Array))
cor.test(pData.pheno.cra$SV3, as.numeric(pData.pheno.cra$Array))

cor.test(pData.pheno.cra$SV1, as.numeric(pData.pheno.cra$Plate))
cor.test(pData.pheno.cra$SV2, as.numeric(pData.pheno.cra$Plate))
cor.test(pData.pheno.cra$SV3, as.numeric(pData.pheno.cra$Plate))

cor.data=pData.pheno.cra[,c("log10Ige","Plate", "Slide", "Array",
      "PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8","PC9","PC10", "SV1","SV2","SV3",
      "SV4","SV5","SV6", "SV7","SV8","SV9","SV10"), drop=FALSE]

cor.data <- as.data.frame(sapply(cor.data, as.numeric))
M<-cor(cor.data)
head(round(M,2))

# matrix of the p-value of the correlation
p.mat <- cor.mtest(cor.data)
head(p.mat[, 1:5])

col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))

corrplot(M, method="color", col=col(200),  
         type="upper", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # Combine with significance
         p.mat = p.mat, sig.level = 0.05, insig = "blank", 
         # hide correlation coefficient on the principal diagonal
         diag=FALSE 
         )

pdf(file = file.path(plots.dir, "correlogram_CRA_pcs_svs_log10Ige.pdf"), 
    width = 16, height = 15)
corrplot(M, method="color", col=col(200),  
         type="upper", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # Combine with significance
         p.mat = p.mat, sig.level = 0.05, insig = "blank", 
         # hide correlation coefficient on the principal diagonal
         diag=FALSE 
         )
dev.off()

formula <- c("~log10Ige+age+Gender+BMI+htcm+Mothers_Asthma_Hx+smoking_early_life+
          fevbd0+fevbd1+fvcbd0+fvcbd1+fev1_fvc_bd0+fev1_fvc_bd1+f2575_fvc_bd0+
        f2575_fvc_bd1+Bcell+CD4T+CD8T+Mono+Neu+NK+Plate+Slide+Array+PC1+PC2+SV1+SV2")

remove <- c(list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$fevbd0) |  
              is.na(pData.pheno.cra$fevbd1) |  is.na(pData.pheno.cra$fvcbd0) | 
          is.na(pData.pheno.cra$fvcbd1) | is.na(pData.pheno.cra$fev1_fvc_bd0) | 
      is.na(pData.pheno.cra$fev1_fvc_bd1) | is.na(pData.pheno.cra$f2575_fvc_bd0) | 
    is.na(pData.pheno.cra$f2575_fvc_bd1) | is.na(pData.pheno.cra$log10Ige) | 
    is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
    is.na(pData.pheno.cra$Gender) | is.na(pData.pheno.cra$BMI) | 
      is.na(pData.pheno.cra$htcm))))
length(remove[[1]]) # 30 samples
pDat.tmp <- pData.pheno.cra[!(rownames(pData.pheno.cra) %in% remove[[1]]),]

ids.keep <- intersect(pDat.tmp$toe_ids, colnames(beta.ewas))
betas.pcr=beta.ewas[,which(colnames(beta.ewas) %in% ids.keep)]
dim(beta.ewas) # 790798    787
dim(betas.pcr) # 790798    757

pheno.sel=pDat.tmp[,c("age", "Gender", "BMI", "htcm", "Mothers_Asthma_Hx", 
                      "smoking_early_life", "fevbd0", "fevbd1", "fvcbd0",  
                      "fvcbd1", "fev1_fvc_bd0", "fev1_fvc_bd1", "f2575_fvc_bd0", 
                      "f2575_fvc_bd1", "log10Ige", "Bcell", "CD4T", "CD8T", "Mono", 
                  "Neu", "NK", "Plate","Slide","Array","PC1","PC2","SV1","SV2"), 
                  drop=FALSE]
pheno.sel <- data.frame(pheno.sel)
table(is.na(pheno.sel)) # there shouldn't be any missingness for this plot

#Top  10  principal components can explain  ~43 % of data variation
pcrplot(betas.pcr, pheno.sel, npc=10)

file.rename(list.files(pattern="pcr_diag*.jpg"), paste0("pcr_diag_IgE_CRA.jpg"))
file.copy("pcr_diag_IgE_CRA.jpg", plots.dir)
rm(betas.pcr)
@

\clearpage
  \begin{figure}[h]
    \begin{center}
      \includegraphics[width=0.8\textwidth]{\Sexpr{plots.dir}/pcr_diag_IgE_CRA}
    \end{center}
    \caption{PC regression plot against all phenotypes CRA}
  \end{figure}
  
\clearpage
\section{IgE EWAS}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

# we can use beta.ewas
#ids.keep <- intersect(pData.pheno.cra$toe_ids, colnames(beta.ewas))
#betas.final=beta.ewas[,which(colnames(beta.ewas) %in% ids.keep)]
pData.pheno.cra$Plate <- as.factor(pData.pheno.cra$Plate)
pData.pheno.cra$Slide <- as.factor(pData.pheno.cra$Slide)
pData.pheno.cra$Array <- as.factor(pData.pheno.cra$Array)

betas.ann850k <- merge(beta.ewas, ann850k, by.x="row.names", by.y="Name", sort=F)
betas.ann850k[1:2,786:790]
betas.ann850k$CGsite <- betas.ann850k$Row.names
rownames(betas.ann850k) <- betas.ann850k$CGsite 
dim(betas.ann850k)
betas.ann850k <- betas.ann850k[,789:834]
betas.ann850k$Gene <- sub(";.*", "", betas.ann850k$UCSC_RefGene_Name)

# CRA
# model1: 22,097, 212 overlap with FHS
# model2: 22,931, 213 overlap with FHS
# model3: 18,507, 205 overlap with FHS
# model4: 23,060, 211 overlap with FHS
# model5: 21,801, 200 overlap with FHS
# model6: 21,791, 208 overlap with FHS
# model7: 27,651, 221 overlap with FHS
# model8: 19,117, 202 overlap with FHS

formula <- c("~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+Bcell+CD4T+CD8T+Mono+Neu+NK+PC1+PC2",
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+Bcell+CD4T+CD8T+Mono+Neu+NK+Plate+Array+PC1+PC2",
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+PC1+PC2",
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+Bcell+CD4T+CD8T+Mono+Neu+NK+PC1+PC2+PC3", 
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+Bcell+CD4T+CD8T+Mono+Neu+NK+Plate+Array+SV1+SV2",
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+SV1+SV2",
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+Bcell+CD4T+CD8T+Mono+Neu+NK+SV1+SV2+SV3",
"~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+Bcell+CD4T+CD8T+Mono+Neu+NK+SV1+SV2")

vars.of.interest <- c("log10Ige", "log10Ige", "log10Ige", "log10Ige", "log10Ige", "log10Ige", "log10Ige", "log10Ige")
varNames <- c("log10Ige_ct_2PCs", "log10Ige_ct_plt_arr_2PCs", "log10Ige_noct_2PCs", "log10Ige_ct_3PCs", "log10Ige_ct_plt_arr_2SVs", "log10Ige_noct2SVs", "log10Ige_ct3SVs", "log10Ige_ct2SVs")

# 1 missing for log10Ige remove before, others removed 8
remove <- c(list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))), 
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))),
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))),
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))),
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))),
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))),
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender))),
            list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
                         is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
                         is.na(pData.pheno.cra$Gender)))
)

length(remove[[1]])
sig.probes <- list()

for (f in 1:length(formula)) {
  # remove subjects if there is a missing value in a variables of interest  
  if (length(remove[[f]])!=0) {
    
    pDat.tmp <- pData.pheno.cra[-remove[[f]],]
    betas.tmp <- beta.ewas[,-remove[[f]]]
    
  } else {
    
    pDat.tmp <- pData.pheno.cra
    betas.tmp <- beta.ewas
  }
  
  print("pDat.tmp dims:")
  print(dim(pDat.tmp))
  print("betas.tmp dims:")
  print(dim(betas.tmp))
  
  design <- model.matrix(as.formula(formula[f]), data=pDat.tmp)
  print("")
  print(formula[f])
  print("")
  pDat.tmp$Gender <- relevel(pDat.tmp$Gender,ref='F')
  
  fit <- limma::lmFit(betas.tmp, design)
  fit <- limma::eBayes(fit)
  
  topHits <- limma::topTable(fit, coef=2, num=Inf, adjust.method="BH", 
                      genelist = betas.ann850k)
  print(summary(decideTests(fit)))
  print("significant probes (bonferroni threshold):")
  print(table(topHits[,'P.Value']<1.431209e-07))
  print("significant probes (adj.p-value < 0.05):")
  print(table(topHits[,'adj.P.Val']<0.05))
  print("significant probes (adj.p-value <= 0.10):")
  print(table(topHits[,'adj.P.Val']<=0.10))
  print("significant probes (adj.p-value <= 0.20):")
  print(table(topHits[,'adj.P.Val']<=0.20))
  print("significant probes (p-value < 0.05):")
  print(table(topHits[,'P.Value']<0.05))
  
  tophits.fdr <- topHits[topHits$adj.P.Val<0.05,]
  
  write.table(topHits,file=file.path(results.dir, 
            paste0("CRA_DMPs_topHits_all_IgE_",gsub('\\.','',
                                    varNames[f]),"_",timeStamp,".txt"))
              ,sep="\t",row.names=F,quote=F)
  write.table(tophits.fdr,file=file.path(results.dir, 
            paste0("CRA_DMPs_topHits_fdr_IgE_",gsub('\\.','',
                                    varNames[f]),"_",timeStamp,".txt"))
              ,sep="\t",row.names=F,quote=F)
  
  # volcano plot
  #volcanoplot(fit, coef=2, cex=1, main="volcano plot \n(blue: adj.P.Val<0.05)", pch=20
  #            , highlight=sum(limma::topTable(fit, coef=2, adjust.method="BH")$adj.P.Val<0.05)
  #            , names=rownames(topHits))
  
}

# Plotting heavy volcano plots for all models may create issues in loading the pdf, therefore just printing the one for the last model
volcanoplot(fit, coef=2, cex=1, main="volcano plot \n(blue: adj.P.Val<0.05)", pch=20
              , highlight=sum(limma::topTable(fit, coef=2, adjust.method="BH")$adj.P.Val<0.05)
              , names=rownames(topHits))

# defined models in a way that my last model will include cell types + 2SVs
# could also use: P_lambda(p) from package QCEWAS, gives same output
P <- topHits$P.Value
chisq <- qchisq(1-P,1)
lambda1 = median(chisq)/qchisq(0.5,1)
lambda1 # 1.336503 for the selected model with ct and 2 SVs

png(file = file.path(plots.dir, "qqplot_log10Ige_CRA.png"),
    width = 540, height = 580)
qq(topHits$P.Value, main="q-q plot CRA log10Ige")
dev.off()
@

\begin{figure}[h]
  \begin{center}
    \includegraphics[width=0.8\textwidth]{\Sexpr{plots.dir}/qqplot_log10Ige_CRA}
  \end{center}
  \caption{Q-Q CRA}
\end{figure}

\section{Applying Bacon to tstats}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

bc <- bacon(topHits$t)
estimates(bc)
str(bc)
bias(bc)
inflation(bc) # using bacon, inflation is 1.062275
png(file = file.path(plots.dir, "qqplot_DM_CpGs_CRA_bacon.png"),
                   width = 1024, height = 540)
plot(bc, type="qq")
dev.off()

png(file = file.path(plots.dir, "distribution_zscores_tstats_CRA.png"),
    width = 540, height = 540)
plot(bc, type="hist")
dev.off()

p <- data.frame(pval(bc))
topHits.bacon <- cbind(topHits, p)
P <- topHits.bacon$pval.bc.

# after bacon using usual method, the inflation: 1.085221
chisq <- qchisq(1-P,1)
lambda1 = median(chisq)/qchisq(0.5,1)
lambda1

topHits.bacon$fdr.bc. <- p.adjust(topHits.bacon$pval.bc., method="BH")
t <- data.frame(tstat(bc))
topHits.bacon <- cbind(topHits.bacon, t)

write.table(topHits.bacon,file=file.path(results.dir, 
        paste0("CRA_DMPs_topHits_all_log10Ige_ct2SVs_bacon_",timeStamp,".txt")),
        sep="\t",row.names=F,quote=F)

save(bc,file=file.path(results.dir,
                       paste0("CRA_bacon_results_IgE_", 
                                       timeStamp,".RData")))

@

\begin{figure}[h]
  \begin{minipage}{0.50\textwidth}
    \includegraphics[width=0.8\textwidth]{\Sexpr{plots.dir}/qqplot_DM_CpGs_CRA_bacon}
  \end{minipage}%
  \begin{minipage}{0.50\textwidth}
    \includegraphics[width=0.8\textwidth]{\Sexpr{plots.dir}/distribution_zscores_tstats_CRA}
  \end{minipage}  
  \caption{a) Q-Q CRA bacon b) distribution zscores tstats CRA}
\end{figure}

\section{Regional analysis}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

# selected model
formula <- c("~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+
             Bcell+CD4T+CD8T+Mono+Neu+NK+SV1+SV2")
vars.of.interest <- c("log10Ige")
varNames <- c("log10Ige")

# 1 missing for log10Ige remove before, others removed 8
remove <- c(list(which(is.na(pData.pheno.cra$age) | is.na(pData.pheno.cra$log10Ige) |  
  is.na(pData.pheno.cra$Mothers_Asthma_Hx) | is.na(pData.pheno.cra$smoking_early_life) | 
            is.na(pData.pheno.cra$Gender))))
length(remove[[1]])

pDat.reg <- pData.pheno.cra[!(rownames(pData.pheno.cra) %in% remove[[1]]),]

ids.keep <- intersect(pDat.reg$toe_ids, colnames(beta.ewas))
betas.reg=beta.ewas[,which(colnames(beta.ewas) %in% ids.keep)]

myMs <- logit2(betas.reg)
myMs <- as.matrix(myMs)

pDat.reg$Gender <- relevel(pDat.reg$Gender,ref='F')
designCRA = model.matrix(~log10Ige+age+Gender+Mothers_Asthma_Hx+smoking_early_life+
       Bcell+CD4T+CD8T+Mono+Neu+NK+SV1+SV2, data=pDat.reg)
myannotationCRA <- cpg.annotate("array", myMs, what="M", 
    annotation=c(array = "IlluminaHumanMethylationEPIC", 
        annotation = "ilmn10b4.hg19"), arraytype = "EPIC",
        analysis.type="differential", design=designCRA, 
        coef="log10Ige", fdr = 0.05)
# Your contrast returned 23240 individually significant probes. 
#We recommend the default setting of pcutoff in dmrcate().
dmrcoutputCRA <- dmrcate(myannotationCRA, lambda=1000, C=2, pcutoff = "fdr")
results.rangesCRA <- extractRanges(dmrcoutputCRA, genome = "hg19")
DMRsCRA <- data.frame(results.rangesCRA)
DMRsCRA <- DMRsCRA[order(DMRsCRA$Stouffer),]
dim(DMRsCRA) # 4,647
DMRsCRA.split <- sub(",.*", "", DMRsCRA$overlapping.genes)
DMRsCRA.split.1 <- sub("-.*", "", DMRsCRA.split)
DMRsCRA$Gene1st <- DMRsCRA.split.1

chr_st <- paste(DMRsCRA$seqnames, DMRsCRA$start, sep = "_")
chr_st_end <- paste(chr_st, DMRsCRA$end, sep = "_")
DMRsCRA$Coordinates <- chr_st_end

DMRsCRA.sig <- DMRsCRA[DMRsCRA$Stouffer<0.05,]

# lowest and highest absolute mean methylation difference: 0.007
summary(DMRsCRA.sig$meandiff)
head(DMRsCRA.sig, n=10)
dim(DMRsCRA.sig) # 3,685
DMRsCRA.sig$abs_meandiffCRA <- abs(DMRsCRA.sig$meandiff)

save(myannotationCRA, dmrcoutputCRA, 
     file=file.path(results.dir,paste0("CRA_regional_DMRs_hg19_results_logIgE_", 
                                       timeStamp,".RData")))

write.table(DMRsCRA.sig, file.path(results.dir, 
      paste0("CRA_DMRs_dmrcate_logIgE_hg19_fdr_", timeStamp, ".txt")),
            sep="\t", quote=F, row.names=F)

@

\section{Session information}
  
<<session, echo=FALSE, results='asis', warning = FALSE>>=
print(Sys.Date())
print(Sys.time())
toLatex(sessionInfo())
@
    
\end{document}
