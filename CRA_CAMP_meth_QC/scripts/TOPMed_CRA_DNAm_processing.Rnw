\documentclass{article}
\usepackage{hyperref}
\hypersetup{
  colorlinks,
  citecolor=black,
  filecolor=black,
  linkcolor=red,
  urlcolor=black
}
%\SweaveOpts{concordance=TRUE}
\usepackage{graphicx, color}
%\usepackage[export]{adjustbox}
\usepackage{floatrow}
\usepackage[T1]{fontenc}
\usepackage[english]{babel}
\usepackage{booktabs}
\usepackage{lscape}
\usepackage{amsmath, amssymb}
\usepackage[sort&compress]{natbib}
\usepackage[a4paper,left=2.5cm,top=2.5cm,bottom=2.5cm,right=2.5cm]{geometry}
\usepackage{fancyhdr}
\usepackage{forloop}
\pagestyle{fancyplain}

\setlength{\parindent}{0cm}
%\renewcommand{\familydefault}{\sfdefault}

%\input{tex/knitr}

\begin{document}
\title{\textbf{TOPMed CRA DNA methylation data QC and sample cleaning}}

\author{reprk: PKachroo\\
  CDNM, BWH}
\date{\today}
%\begin{document}

\maketitle

\tableofcontents
\clearpage

\section{Setup}

<<setup, echo = TRUE, message = FALSE, results = "markup">>=

# restart R session
#.rs.restartR()
rm(list=ls())

options(mc.cores=5)
system("hostname")
print(Sys.Date())
print(Sys.time())

# To generate document: 
# Change working directory to code directory
# Run this code on toques using:
# module load R/4.0.3
#R -e 'library(knitr);knit("TOPMed_CRA_DNAm_processing.Rnw")'
# pdflatex TOPMed_CRA_DNAm_processing.tex

# merging with WGS, uses hg38?
## load libraries
libs <- c("IlluminaHumanMethylationEPICanno.ilm10b4.hg19",
          "IlluminaHumanMethylationEPICmanifest", "minfi")

for (l in libs) {
  if (require(l, character.only = T)) {
    print(paste0(l, " loaded successfully"))
  } else {
    install.packages(l)
    require(l, character.only = T)
    print(paste0(l, " installed and loaded successfully"))
  }
}

sig_digits <- 2
sum_sd <- function(data, varname) {
    eval(parse(text = str_c("data[, round(summary(", varname, "), digits=2)] %>% print()")))
    eval(parse(text = str_c("print(str_c('SD: ', data[, sd(", varname, ", na.rm = T) %>% 
                                round(sig_digits)]))")))
}
@

  \subsection{Packages, Data locations and loading}
  
<<echo = TRUE, warning=FALSE, message = FALSE, results = "markup">>=

qc.dir = "/proj/regeps/regep00/studies/CRA"
cra.dir = file.path(qc.dir,"data/epigenetic/methylation/TopMed/data/freezes/20200117")
RGSet.cra = readRDS(file=file.path(cra.dir, "LEVEL2/RGSet")) # 1237 samples
dim(RGSet.cra) # 1008711
RGSet.cra
manifest = getManifest(RGSet.cra)
manifest
data(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
data("Manifest")
table(Manifest$Type)

length(grep("^cg.", rownames(Manifest), value=TRUE)) # 862927 CG probes
length(grep("^ch.", rownames(Manifest), value=TRUE)) # 2932 CH probes
length(grep("^rs.", rownames(Manifest), value=TRUE)) # 0

# Downloaded Illumina manifest file
festV1 <- read.csv("/proj/rerefs/reref00/Illumina/MethylationEPIC-v1-0-B4/lib/MethylationEPIC_v-1-0_B4.csv",
                   skip=7,as.is=TRUE, sep=",", stringsAsFactors=FALSE)

# loading rest of the libraries
libs <- c("limma", "wateRmelon", "minfi", "gplots", "ggplot2", "knitr", "R.utils", "impute", 
          "stats", "tidyverse", "data.table", "here", "e1071", "GGally", "ggrepel", "ENmix",
          "meffil", "data.table", "robustbase", "stringi", "geneplotter", "RColorBrewer",
          "colorRamps", "lumi", "ggrepel")

for (l in libs) {
  if (require(l, character.only = T)) {
    print(paste0(l, " loaded successfully"))
  } else {
    install.packages(l)
    require(l, character.only = T)
    print(paste0(l, " installed and loaded successfully"))
  }
}

plots.dir = file.path(qc.dir,"analysis/reprk/methylation/plots")
results.dir = file.path(plots.dir,"../results")
meff.dir = file.path(qc.dir,"analysis/reprk/meffil_850K")

# modified RCP code
source("/udd/reprk/projects/TOPMed/scripts/RCP_mod.R")

pca.betas <- function (beta, npc = 50) 
{
    if (!is.matrix(beta)) {
        stop("beta is not a data matirx")
    }
    cat("Analysis is running, please wait...!", "\n")
    npc <- min(ncol(beta), npc)
    svd <- prcomp(t(beta), center = TRUE, scale = TRUE, retx = TRUE)
    eigenvalue <- svd[["sdev"]]^2
    prop <- (sum(eigenvalue[1:npc])/sum(eigenvalue)) * 100
    cat("Top ", npc, " principal components can explain ", prop, 
        "% of data \n    variation", "\n")
    save(svd, eigenvalue, prop, file=file.path(results.dir,"pca_betas_auto.RData"))
}

setwd("/udd/reprk/projects/TOPMed/scripts")
cra.pheno <- read.csv(file=file.path(qc.dir, "data/phenotype/CRA_Phenotype_Data/COS_TRIO_pheno_1165.csv"),
                as.is=TRUE, sep=",", stringsAsFactors=FALSE)

samplesheet.cra <- read.csv(file=file.path(cra.dir, "LEVEL1/SampleSheet.csv"), 
                            as.is=TRUE, sep = ",", fill=T, stringsAsFactors=FALSE)

sex.mismatch <- read.table(file=file.path(cra.dir, "LEVEL2/sex_mismatch.txt"), 
                           sep="\t", header=F,stringsAsFactors=FALSE)

# cra chanmine issues
# https://chanmine.bwh.harvard.edu/issues/20974
# https://chanmine.bwh.harvard.edu/issues/21321
# https://chanmine.bwh.harvard.edu/issues/20731

# fam file format
#A text file with no header line, and one line per sample with the following six fields:

#    Family ID ('FID')
#    Within-family ID ('IID'; cannot be '0')
#    Within-family ID of father ('0' if father isn't in dataset)
#    Within-family ID of mother ('0' if mother isn't in dataset)
#    Sex code ('1' = male, '2' = female, '0' = unknown)
#    Phenotype value ('1' = control, '2' = case, '-9'/'0'/non-numeric = missing data if case/control)

cra.fam <- str_c(qc.dir, "/metadata/CRA.fam")
cra.fam <- fread(cra.fam)
colnames(cra.fam) <- c("FID","IID","FatherID","MotherID","Sex","Phenotype")
cra.fam$sex[cra.fam$Sex==1]<-"M"; cra.fam$sex[cra.fam$Sex==2]<-"F"
dim(cra.fam) # 5117; 2410 F, 2700 M, 7 NAs

# Save result files with timeStamp
timeStamp <- as.character(round(unclass(Sys.time())))
print(timeStamp)

# Resource: https://github.com/markgene/maxprobes
cross_probes_file = paste(cra.dir, "/LEVEL2/cross_reactive_probes.txt",
                          sep = "")
if (!file.size(cross_probes_file) == 0){
    cross_probes = read.table(cross_probes_file, sep = "\t",
                              header = F, quote = "\"", fill = T)
    colnames(cross_probes) = c("sample")
    n_cross_probes = nrow(cross_probes)
    n_cross_probes
} else {
    n_cross_probes = 0
}

n_cross_probes # 44,570

fail.samps <- read.table(file=file.path(meff.dir, "qc/cra_failed_samples_metrics_hg19_1617744049.txt"), 
                         sep="\t", header=T,stringsAsFactors=FALSE)
@

\section{Data preprocessing and filtering}
  \subsection{Failed Samples filtering and sex mismatches}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=
################################
# CRA final analysis from RGSet
################################

sex.mismatch <- sex.mismatch$V1; length(sex.mismatch)
sex.mismatch
RGSet.cra=RGSet.cra[,!colnames(RGSet.cra) %in% sex.mismatch]

#first six samples are sex mismatches so removed
# samples with mixed genotype distributions on the measured SNP probes (59 SNP probes), 
# indicating possible sample contamination (n=3) or sample mix ups
rem <- c("TOE283252-BIS-v01_R02C01",
         "TOE176389-BIS-v01_R08C01",
         "TOE722209-BIS-v01_R06C01")
          
RGSet.cra=RGSet.cra[,!colnames(RGSet.cra) %in% rem]
intersect(sex.mismatch, rem)

################################################
# Remove failed samples identified using meffil
################################################

# loaded this file in file loading section
# selected samples to exclude based on QC report
index <- fail.samps$issue %in% c("Control probe (dye.bias)", 
                              "Methylated vs Unmethylated",
                              "Control probe (bisulfite1)",
                              "Control probe (bisulfite2)",
                              "Control probe (hybe.21771417)",
                              "Control probe (hybe.28684356)",
                              "Control probe (hybe.39782321)")

outlier <- fail.samps[index,]
dim(outlier) # 38
failed.ids <- unique(outlier$sample.name) # 21
length(failed.ids); failed.ids # finally samples that will be removed

# checking overlap of 9 sex mismatches + genotype issues with failed meffil samples
intersect(sex.mismatch, failed.ids);intersect(failed.ids, rem)

RGSet.cra=RGSet.cra[,!colnames(RGSet.cra) %in% failed.ids]
dim(RGSet.cra)
betas.chk <- getBeta(RGSet.cra)
pData.cra <- pData(RGSet.cra)
ann850k <- getAnnotation(RGSet.cra)
xychr = rownames(betas.chk) %in% ann850k$Name[ann850k$chr %in% c("chrX","chrY")]
betas.xy = betas.chk[xychr,]

# shows the 3 sex outliers
mdsPlot(as.matrix(betas.chk), numPositions=500, main=sprintf("Beta MDS - Sex\n%d most variable positions", 500), sampNames=pData.cra$LEVEL1.TOEID, pch=1, legendNCol=2, sampGroups=pData.cra$Gender, legendPos="bottomright", pal=c(brewer.pal(8, "Dark2"), brewer.pal(12, "Paired")))

mdsPlot(as.matrix(betas.xy), numPositions=19627, main=sprintf("Beta MDS - Sex\n%d all sex chr positions", 19627), sampNames=pData.cra$LEVEL1.TOEID, pch=1, legendNCol=2, sampGroups=pData.cra$Gender, legendPos="bottomright", pal=c(brewer.pal(8, "Dark2"), brewer.pal(12, "Paired")))

pdf(file = file.path(plots.dir, "MDS_sex_out_500pos_names.pdf"), width = 6, height = 6)
mdsPlot(as.matrix(betas.chk), numPositions=500, main=sprintf("Beta MDS - Sex\n%d most variable positions", 500), sampNames=pData.cra$LEVEL1.TOEID, pch=1, legendNCol=2, sampGroups=pData.cra$Gender, legendPos="bottomright", pal=c(brewer.pal(8, "Dark2"), brewer.pal(12, "Paired")))
dev.off()

pdf(file = file.path(plots.dir, "MDS_sex_chr_out_19627pos_names.pdf"), width = 6, height = 6)
mdsPlot(as.matrix(betas.xy), numPositions=19627, main=sprintf("Beta MDS - Sex\n%d all sex chr positions", 19627), sampNames=pData.cra$LEVEL1.TOEID, pch=1, legendNCol=2, sampGroups=pData.cra$Gender, legendPos="bottomright", pal=c(brewer.pal(8, "Dark2"), brewer.pal(12, "Paired")))
dev.off()

# further removed the 3 sex outliers identified as above and through meffil norm
# report we don't remove all the sex outliers as they did not look concerning
sex.out <- c("TOE768143-BIS-v01_R01C01", "TOE473872-BIS-v01_R02C01", "TOE631417-BIS-v01_R02C01")
RGSet.cra=RGSet.cra[,!colnames(RGSet.cra) %in% sex.out]
dim(RGSet.cra) # 1204
# Do any overlap with those failed samples identified before?
intersect(rem, sex.out);intersect(failed.ids, sex.out)

# probably not needed anymore as these plots are also generated using meffil
#library(ENmix)
#jpeg(file = file.path(plots.dir, "ENmixcontrol_plots_CRA_bisulfite.jpg"),
#    width = 750, height = 1500)
#plotCtrl(RGSet.cra)
#dev.copy(jpeg,'ENmixcontrol_plots_CRA_bisulfite.jpg')
#dev.off()
@

  \subsection{detP calculation}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

##############
# Detection P
##############

detP.cra <- detectionP(RGSet.cra, type="m+u")

save(detP.cra, file=file.path(results.dir,paste0("detP.cra_hg19_", timeStamp,".RData")))
print(table(detP.cra>0.05))
print(table(detP.cra>0.01))

# to check whether there are any probes with detP>0.05 across each sample, 
# not doing this anymore, this is slightly different to what we are doing below
#M2<-matrix(runif(36),nrow=6);M2;M2.f<-M2>0.50;M2.f;colMeans(M2.f);rowMeans(M2.f);
#M3 <- M2;M3[M3>0.50] <- NA;M3;M3[rowMeans(M2.f)>0.50] <- NA;M3;M4 <- M2 + M3
#detP.cra[detP.cra > 0.05] <- NA
#detP.cra[detP.cra < 0.05] <- 0

#####################
# sample-wise thresh.
#####################
# colMedians(detP.cra) similar# robustbase r package
dim(detP.cra[,colMeans(detP.cra)>0.001])
dim(detP.cra[,colMeans(detP.cra)>0.002])
dim(detP.cra[,colMeans(detP.cra)>0.003])
dim(detP.cra[,colMeans(detP.cra)>0.004])
dim(detP.cra[,colMeans(detP.cra)>0.005])
dim(detP.cra[,colMeans(detP.cra)>0.05]) # none
dim(detP.cra[,colMeans(detP.cra)>0.01]) # none

#########################
# Failed detP probes minfi
#########################
# Threshold of detP 0.01 in more than 25% of the samples using minfi stats
failed.01<-detP.cra > 0.01
#colMeans(failed.01) # Fraction of failed positions per sample
sum(colMeans(failed.01)>0.20) # >20% probes failed per sample

sum(rowMeans(failed.01)>0.05)
sum(rowMeans(failed.01)>0.10)
sum(rowMeans(failed.01)>0.15)
sum(rowMeans(failed.01)>0.20) # should be same as length(failedProbes)
sum(rowMeans(failed.01)>0.25)

# How many positions failed in >20% of samples?
failedProbes <- rownames(failed.01)[rowMeans(failed.01)>0.20]
length(failedProbes)
save(failedProbes, file=file.path(results.dir,paste0("failedProbes_CRA_hg19_", timeStamp,".RData")))

# plots
barplot(colMeans(detP.cra), las=2, axisnames = FALSE, main="Mean detection p-values")
abline(h=0.001,col="red")
hist(colMeans(detP.cra), las=2, main="Mean detection p-values", breaks=30)

pdf(file = file.path(plots.dir, "colMeans_detP_check_failed_samples_CRA.pdf"),
     width = 10, height = 5)
barplot(colMeans(detP.cra), las=2, axisnames = FALSE, main="Mean detection p-values")
abline(h=0.001,col="red")
dev.off()

pdf(file = file.path(plots.dir, "colMeans_detP_all_samples_hist_CRA.pdf"),
     width = 6, height = 5)
hist(colMeans(detP.cra), las=2, main="Mean detection p-values", breaks=30)
dev.off()

# plotting every sample, Not printing this because the loop will run for all 
# and will likely print a huge plot
pdf(file = file.path(plots.dir, "detP_all_samples_hist_freq_CRA.pdf"),
     width = 156, height = 136)
par(mfrow=c(32, 38))
colnames <- dimnames(detP.cra)[[2]]
for (i in 1:1204) {
#print(i)
hist(log10(detP.cra[,i]), las=2, breaks=50, main=colnames[i], col="gray", border="white")
}
dev.off()
@

  \subsection{svas and cell type count estimation}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

# generate surrogate variables derived based on intensity data 
# for non-negative internal control probes
# this step is pretty quick
csva<-ctrlsva(RGSet.cra)
save(csva, file=file.path(results.dir,paste0("CRA_svas_rawdata_hg19_", timeStamp, ".RData")))

# cell count estimates
library("FlowSorted.Blood.EPIC")
library(ExperimentHub)
hub <- ExperimentHub()
#> snapshotDate(): 2020-10-02
epicref <- query(hub, "FlowSorted.Blood.EPIC")
epicref; epicref$title
FlowSorted.Blood.EPIC.ref <- epicref[[1]]
FlowSorted.Blood.EPIC.ref

# meanPlot=TRUE: Whether to plots the average DNA methylation 
#across the cell-type discrimating probes within the mixed 
# and sorted samples.
if (memory.limit()>8000){ 
  countsEPIC<-estimateCellCounts2(RGSet.cra, compositeCellType = "Blood", 
                                processMethod = "preprocessFunnorm", 
                                cellTypes = c("CD8T", "CD4T", "NK", "Bcell", 
                                              "Mono", "Neu"), 
                                referencePlatform = 
                                    "IlluminaHumanMethylationEPIC",
                                referenceset = "FlowSorted.Blood.EPIC.ref",
                                IDOLOptimizedCpGs =NULL, 
                                returnAll = TRUE,
                                meanPlot = TRUE,
                                verbose = TRUE)
}

save(countsEPIC, file=file.path(results.dir,paste0("CRA_EPIC_estimatecellcounts_hg19_", 
                                                   timeStamp,".RData")))
celltype.est.2 <- countsEPIC$counts
save(celltype.est.2, file=file.path(results.dir, paste0("CRA_EPIC_estimatecellcounts2_result_hg19_",
                                                        timeStamp, ".RData")))

TOE <- data.frame(do.call('rbind', strsplit(as.character(samplesheet.cra$Basename),'/',fixed=TRUE)))
samplesheet.cra$TOE_RC <- TOE$X14
ct.sampsheet <- merge(celltype.est.2, samplesheet.cra, by.x="row.names", by.y="TOE_RC", sort=F)
#cra.pheno.sel=cra.pheno[,c("cra","S_SUBJECTID"), drop=FALSE]
#ct.pheno <- merge(ct.sampsheet, cra.pheno.sel, by="S_SUBJECTID", sort=F)
par(mfrow=c(1,1));sex.pal <- brewer.pal(8,"Set1")
a = celltype.est.2[ct.sampsheet$Gender == "M",]
b = celltype.est.2[ct.sampsheet$Gender == "F",]
boxplot(a, at=0:5*3 + 1, xlim=c(0, 18), ylim=range(a, b), xaxt="n", 
        col=sex.pal[1], main="", ylab="Cell type proportion")
boxplot(b, at=0:5*3 + 2, xaxt="n", add=TRUE, col=sex.pal[2])
axis(1, at=0:5*3 + 1.5, labels=colnames(a), tick=TRUE)
legend("topleft", legend=c("M","F"), fill=sex.pal)

@

  \subsection{Noob normalization and funnorm}

<<echo = TRUE, message = FALSE, warning=FALSE, results = "markup">>=

# clearing up some objects from memory no longer needed
rm(countsEPIC)
rm(celltype.est.2)
rm(detP.cra)
rm(csva)
######################
# NOOB Normalization
######################

MSet.noob.cra <- preprocessNoob(RGSet.cra, offset = 15, dyeCorr = TRUE, verbose = TRUE)

###################################################################################
# This object is sample cleaned but probe filtering has not been performed for this, 
# check probe filtering steps below to identify which probes need to be set to NA 
# if you use this object for any further downstream analysis
###################################################################################
save(MSet.noob.cra, file=file.path(results.dir,paste0("Mset.noob.cra_hg19_", 
                                                      timeStamp,".RData")))
MSet.noob.cra <- NULL

################################################################################
# shows that phenotype file and LIMS/samplesheet genders match for the probands
################################################################################
pData.cra <- pData(RGSet.cra)
pData.pheno <- merge(pData.cra, cra.pheno, by="S_SUBJECTID", sort=F)
table(pData.pheno$Gender, pData.pheno$gender)

pData.cra$Sex[pData.cra$Gender=="F"]<-0
pData.cra$Sex[pData.cra$Gender=="M"]<-1
sex <- pData.cra$Sex

# Runs for few hours, I wanted the output to be in mset format, otherwise, I can not extract methylated and unmethylated intensities from ratioset
mset.cra.funnorm <- preprocessFunnorm(RGSet.cra, nPCs=3, sex=sex, ratioConvert = FALSE, 
                                      bgCorr=TRUE, dyeCorr=TRUE, verbose=TRUE)
mset.cra.funnorm <- addSex(mset.cra.funnorm)

############################################
# Dataset after functional normalization
############################################
save(mset.cra.funnorm, file=file.path(results.dir,paste0("mset.cra.funnorm_hg19_", 
                                                         timeStamp,".RData")))

betas <- getBeta(mset.cra.funnorm)
ann850k <- getAnnotation(mset.cra.funnorm)
#pData.cra <- pData(mset.cra.funnorm)

# median meth and unmeth intensities plot
qc <- getQC(mset.cra.funnorm)
meds <- (qc$mMed + qc$uMed)/2
mMed <- qc@listData$mMed
uMed <- qc@listData$uMed
qc.cra <- data.frame(mMed, uMed, meds)
rownames(qc.cra) <- qc@rownames
dim(qc.cra[qc.cra$meds<10.5,])
plotQC(qc)

# Plots
pdf(file = file.path(plots.dir, "QC_samples_minfi_detP0.01_20per_samples_CRA.pdf"),
      width = 5, height = 5)
plotQC(qc)
dev.off()

@

\section{Session information}
  
<<session, echo=FALSE, results='asis', warning = FALSE>>=
print(Sys.Date())
print(Sys.time())
toLatex(sessionInfo())
@
    
\end{document}
